[gd_scene load_steps=21 format=3 uid="uid://gstyw8p8e804"]

[ext_resource type="Script" path="res://common/ui/hud/hud.gd" id="1_2s207"]
[ext_resource type="Texture2D" uid="uid://brxpp54hlktjr" path="res://common/art/weapons/sword/anim_sword_idle.png" id="2_1miuj"]
[ext_resource type="Texture2D" uid="uid://b8hxssphre3l4" path="res://sprites/arrow_high.png" id="2_616me"]
[ext_resource type="Script" uid="uid://ddtgra06qolko" path="res://addons/animated_texture_rect/animated_texture_rect.gd" id="3_0pq1e"]
[ext_resource type="PackedScene" uid="uid://gfjq3d4ma7rx" path="res://common/ui/overlays/upgrade_overlay/upgrade_overlay.tscn" id="4_0pq1e"]
[ext_resource type="Texture2D" uid="uid://cd8fn4r0jwxr8" path="res://sprites/arrow_low.png" id="4_5qx2s"]
[ext_resource type="SpriteFrames" uid="uid://cn65d0mc2r6x" path="res://animations/anim_sword.tres" id="4_q0by1"]
[ext_resource type="Shader" path="res://common/ui/hud/experience.gdshader" id="7_1soxg"]
[ext_resource type="Script" path="res://common/ui/hud/experience_current_level_bar.gd" id="8_mgddf"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_862u4"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_bqepj"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_0pq1e"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_616me"]

[sub_resource type="AtlasTexture" id="AtlasTexture_hj6hy"]
atlas = ExtResource("2_1miuj")
region = Rect2(0, 1024, 512, 512)

[sub_resource type="SpriteFrames" id="SpriteFrames_t0hse"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_616me")
}, {
"duration": 1.0,
"texture": ExtResource("4_5qx2s")
}],
"loop": true,
"name": &"idle",
"speed": 2.0
}]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0oqiw"]
resource_local_to_scene = true
shader = ExtResource("7_1soxg")
shader_parameter/beams = 2
shader_parameter/energy = 3.0
shader_parameter/roughness = 3
shader_parameter/frequency = 10
shader_parameter/speed = 1.0
shader_parameter/thickness = 0.069
shader_parameter/outline_thickness = 0.03
shader_parameter/beam_difference = 0.0
shader_parameter/glow = 0.0
shader_parameter/outline_glow = 0.0
shader_parameter/color = Color(0.91, 1, 1, 1)
shader_parameter/outline_color = Color(0.5, 1, 0.96, 1)
shader_parameter/progress = 1.0
shader_parameter/y_offset = 0.0
shader_parameter/fixed_edge_size = 0.05
shader_parameter/noise_scale = Vector2(1, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_aeodr"]
bg_color = Color(0.6, 0.6, 0.6, 0.686275)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_2s207"]
bg_color = Color(0.225725, 0.914585, 1, 1)

[sub_resource type="Shader" id="Shader_1r58m"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/energy-beams

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;
render_mode blend_add; // Remove this if you want to use HDR glow instead (use \"Glow\" and \"Outline Glow\" sliders)

uniform int beams = 2; // How many beams the energy field should have

uniform float energy = 3.0; // How much the beams will travel up and down
uniform int roughness : hint_range(1, 10) = 3; // How compact the noise texture will be
uniform int frequency = 10; // Amount of \"ripples\" in the beams

uniform float speed = 1.0; // Animation speed
uniform float thickness : hint_range(0.0, 0.2) = 0.006; // Thickness of the main beam
uniform float outline_thickness : hint_range(0.0, 0.1) = 0.03; //Thickness of the outline color
uniform float beam_difference : hint_range(0.0, 1.0) = 0.0; // The thickness difference between the main beam and the other, if there are more than one beam. The closer to 1 the smaller the thickness difference.

uniform float glow : hint_range(0.0, 3.0) = 0.0; // Use together with WorldEnvironment's Glow feature
uniform float outline_glow : hint_range(0.0, 3.0) = 0.0;

uniform vec4 color : source_color = vec4(0.91, 1.0, 1.0, 1.0);
uniform vec4 outline_color : source_color = vec4(0.5, 1.0, 0.96, 1.0);

uniform float progress : hint_range(0.0, 1.0) = 1.0;

uniform float y_offset : hint_range (-0.5, 0.5) = 0.0; // Position of the beam
uniform float fixed_edge_size : hint_range(0.0, 0.5) = 0.05; // How close to the edge should the beam be still before the animatino starts
uniform vec2 noise_scale = vec2(1.0); // If the object (for example the ColorRect or Sprite node) is compressed use this to compensate for the noise texture being compressed.

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    // Four corners in 2D of a tile
    float a = random(uv_index);
    float b = random(uv_index + vec2(1.0, 0.0));
    float c = random(uv_index + vec2(0.0, 1.0));
    float d = random(uv_index + vec2(1.0, 1.0));

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix(a, b, blur.x) +
            (c - a) * blur.y * (1.0 - blur.x) +
            (d - b) * blur.x * blur.y;
}

float fbm(vec2 uv, float time) {
    int octaves = roughness;
    float amp = 0.01 * energy * progress;
    float freq = float(frequency);
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amp * noise(freq * vec2(uv.x, uv.y + time));
        amp *= 0.5;
        freq *= 2.0;
    }
    return value;
}

vec4 difference(vec4 base, vec4 blend){
	return abs(base - blend);
}

vec4 bolt(vec2 uv, float time, float i)
{
	// Setup the beam locking to the edges.
	float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);
	
	// Use Fractal Brownian Motion to create a \"cloud texture\" and use Difference blend mode to make the beam
	vec4 clouds = vec4(fbm((uv + vec2(i) ) * noise_scale, time * speed)) * falloff;
	vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));
	
	// Create a new noise to mask the beams on low \"progress\" values. To make a \"turn-off\" effect more visually interesting.
	vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;
	diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);
	
	// Set thickness of the beams. First beam is the Thickness size and all following beams are sized with beam_difference
	float thickness2 =  1. - ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;
	vec4 beam = clamp(smoothstep(thickness2, thickness2 + 0.005 * progress, 1.0 - diff_clouds), vec4(0.0), vec4(1.0));
	
	//Set the beam outlines
	vec4 beam_outline;
	float outline = thickness2 - (outline_thickness * progress);
	beam_outline = clamp(smoothstep(outline, outline + 0.04, 1.0 - diff_clouds), 0.0, 1.0);
	beam_outline = clamp(beam_outline - beam, 0.0, 1.0);
	
	// Merge the beam and the outline and return to the fragment function
	return (beam * (color + vec4(glow, glow, glow, 0.))) + (beam_outline * (outline_color + vec4(outline_glow, outline_glow, outline_glow, 0.)));
}

void fragment()
{	
	vec4 beam = vec4(0.0);
	
	for (int i = 0; i < beams; i++){
		beam = max(beam, bolt(UV, TIME, float(i)));
	}
	
	COLOR = beam;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vb3yn"]
resource_local_to_scene = true
shader = SubResource("Shader_1r58m")
shader_parameter/beams = 2
shader_parameter/energy = 3.0
shader_parameter/roughness = 3
shader_parameter/frequency = 2
shader_parameter/speed = 1.0
shader_parameter/thickness = 0.2
shader_parameter/outline_thickness = 0.1
shader_parameter/beam_difference = 0.0
shader_parameter/glow = 3.0
shader_parameter/outline_glow = 0.0
shader_parameter/color = Color(0.91, 1, 1, 1)
shader_parameter/outline_color = Color(0.5, 1, 0.96, 1)
shader_parameter/progress = 1.0
shader_parameter/y_offset = 0.0
shader_parameter/fixed_edge_size = 0.05
shader_parameter/noise_scale = Vector2(1, 1)

[node name="Hud" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_2s207")

[node name="BottomMarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_top = -100.0
grow_horizontal = 2
grow_vertical = 0
theme_override_constants/margin_bottom = 50

[node name="MarginContainer" type="MarginContainer" parent="BottomMarginContainer"]
layout_mode = 2
size_flags_horizontal = 8
theme_override_constants/margin_right = 150
theme_override_constants/margin_bottom = 75

[node name="LevelUpButton" type="Button" parent="BottomMarginContainer/MarginContainer"]
unique_name_in_owner = true
visible = false
custom_minimum_size = Vector2(200, 300)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
theme_override_colors/font_outline_color = Color(1, 1, 1, 1)
theme_override_constants/outline_size = 5
theme_override_font_sizes/font_size = 40
theme_override_styles/focus = SubResource("StyleBoxEmpty_862u4")
theme_override_styles/hover = SubResource("StyleBoxEmpty_bqepj")
theme_override_styles/pressed = SubResource("StyleBoxEmpty_0pq1e")
theme_override_styles/normal = SubResource("StyleBoxEmpty_616me")
text = "Level Up"

[node name="WeaponAnimation" type="TextureRect" parent="BottomMarginContainer/MarginContainer/LevelUpButton"]
show_behind_parent = true
layout_mode = 0
offset_left = -226.0
offset_top = -110.0
offset_right = 286.0
offset_bottom = 402.0
texture = SubResource("AtlasTexture_hj6hy")
script = ExtResource("3_0pq1e")
sprites = ExtResource("4_q0by1")
current_animation = "idle"
auto_play = true
playing = true

[node name="AnimatedTextureRect" type="TextureRect" parent="BottomMarginContainer/MarginContainer/LevelUpButton"]
modulate = Color(0, 1, 1, 1)
show_behind_parent = true
layout_mode = 1
anchors_preset = -1
anchor_left = 0.508
anchor_top = 1.0
anchor_right = 0.508
anchor_bottom = 1.0
offset_left = -158.264
offset_top = -245.0
offset_right = 151.736
offset_bottom = 65.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("2_616me")
expand_mode = 1
script = ExtResource("3_0pq1e")
sprites = SubResource("SpriteFrames_t0hse")
current_animation = "idle"
playing = true
metadata/_custom_type_script = ExtResource("3_0pq1e")

[node name="ExperienceCurrentLevelBar" type="ProgressBar" parent="."]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_0oqiw")
custom_minimum_size = Vector2(1200, 100)
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -600.0
offset_top = -134.0
offset_right = 600.0
offset_bottom = -84.0
grow_horizontal = 2
grow_vertical = 0
size_flags_horizontal = 4
size_flags_vertical = 4
theme_override_styles/background = SubResource("StyleBoxFlat_aeodr")
theme_override_styles/fill = SubResource("StyleBoxFlat_2s207")
show_percentage = false
script = ExtResource("8_mgddf")

[node name="OverBar" type="ColorRect" parent="ExperienceCurrentLevelBar"]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_vb3yn")
layout_mode = 0
offset_right = 40.0
offset_bottom = 100.0

[node name="UpgradeOverlay" parent="." instance=ExtResource("4_0pq1e")]
unique_name_in_owner = true
visible = false
